#include <Servo.h>
Servo Baseservo;// create servo object to control a servo
Servo Shoulderservo;// twelve servo objects can be created on most boards
Servo Elbowservo;
Servo Wristservo;
Servo Rotateservo;
Servo Gripservo;

int startH = 63;
int endH = 53;

int pos = 0;    // variable to store the servo position

int count = 1;
int fix, end_fix;

#define place_r 4
#define angle_c 6

int location [place_r][angle_c] = { { 90, 51, 70, 0, 90, 115},
  { 180, 51, 70, 0, 90, 115},
  { 0, 51, 70, 0, 90, 115},
  { 135, 50, 60, 20, 0, 115}
};

char val;

void setup() {
  Serial.begin(9600);
  Baseservo.attach(3);
  Shoulderservo.attach(5);
  Elbowservo.attach(6);
  Wristservo.attach(9);
  Rotateservo.attach(10);  // attaches the servo on pin 10 to the servo object
  Gripservo.attach(11);

}

void loop() {
  if (Serial.available())
  { // If data is available to read,
    val = Serial.read(); // read it and store it in val
  }
  if (val == 'A')
  { // If A was received
    if (count % 2 == 1) {

      startH = location[0][1] + 10; // was at 63
      endH = location[0][1];    //was at 53

      for (int i = 1; i <= 3; i++) {

        if (i == 1) {
          fix = 5;
        }
        else if (i == 2) {
          fix = 8;
        }
        else if (i == 3) {
          fix = 10;
        }
        else {}

        Gripservo.write(location[0][5]);
        delay(500);
        Rotateservo.write(location[0][4]);
        delay(500);
        Wristservo.write(location[0][3]);
        delay(500);
        Elbowservo.write(location[0][2]);
        delay(500);
        Baseservo.write(location[0][0]);
        delay(1000);
        Shoulderservo.write(startH + 17);
        delay(500);
        Shoulderservo.write(startH + 7);
        delay(250);
        Shoulderservo.write(startH);      //arrive at location of cube
        delay(3000);

        startH = startH - 5;

        Gripservo.write(80);   //catch cube
        delay(2000);
        Shoulderservo.write(90);    //lift
        delay(1000);

        Baseservo.write(location[1][0]);   //change location
        delay(1000);
        Elbowservo.write(location[0][2]);
        Wristservo.write(location[0][3]);
        Rotateservo.write(location[0][4]);
        Shoulderservo.write(endH + 17);
        delay(500);
        Shoulderservo.write(endH + 7);
        delay(250);
        Shoulderservo.write(endH);    //lower
        delay(1000);
        Gripservo.write(115);   //release
        delay(1000);

        Shoulderservo.write(90);      // arm leaves end location
        delay(500);

        endH = endH + 5;
      }
      count++;
    }

    if (count % 2 == 0) {

      startH = location[1][1] + 10;
      endH = location[1][1];

      for (int j = 1; j <= 3; j++) {

        if (j == 1) {
          fix = 5;
        }
        else if (j == 2) {
          fix = 8;
        }
        else if (j == 3) {
          fix = 10;
        }
        else {}

        Gripservo.write(location[1][5]);
        delay(500);
        Wristservo.write(location[1][3] + fix);
        delay(500);
        Elbowservo.write(location[1][2]);
        delay(500);
        Baseservo.write(location[1][0]);
        delay(1000);
        Shoulderservo.write(startH + 17);
        delay(500);
        Shoulderservo.write(startH + 7);
        delay(250);
        Shoulderservo.write(startH);


        //arrive at location of cube
        delay(1000);

        startH = startH - 5;

        Gripservo.write(80);   //catch cube
        delay(500);
        Shoulderservo.write(90);    //lift
        delay(500);
        Baseservo.write(90);   //change location
        delay(1000);
        Shoulderservo.write(endH + 17);
        delay(500);
        Shoulderservo.write(endH + 7);
        delay(250);
        Shoulderservo.write(endH);    //lower
        delay(500);
        Gripservo.write(115);   //release
        delay(1000);

        Shoulderservo.write(90);
        delay(500);

        endH = endH + 5;
      }
      count++;
    }
  } else if (val == 'B') {
    if (count % 2 == 1) {

      startH = location[0][1] + 10; // was at 63
      endH = location[0][1];    //was at 53

      for (int i = 1; i <= 3; i++) {

        if (i == 1) {
          fix = 5;
        }
        else if (i == 2) {
          fix = 8;
        }
        else if (i == 3) {
          fix = 10;
        }
        else {}

        Gripservo.write(location[1][5]);
        delay(500);
        Rotateservo.write(location[1][4]);
        delay(500);
        Wristservo.write(location[1][3]);
        delay(500);
        Elbowservo.write(location[1][2]);
        delay(500);
        Baseservo.write(location[1][0]);
        delay(1000);
        Shoulderservo.write(startH + 17);
        delay(500);
        Shoulderservo.write(startH + 7);
        delay(250);
        Shoulderservo.write(startH);      //arrive at location of cube
        delay(3000);

        startH = startH - 5;

        Gripservo.write(80);   //catch cube
        delay(2000);
        Shoulderservo.write(90);    //lift
        delay(1000);

        Baseservo.write(location[2][0]);   //change location
        delay(1000);
        Elbowservo.write(location[2][2]);
        Wristservo.write(location[2][3]);
        Rotateservo.write(location[2][4]);
        Shoulderservo.write(endH + 17);
        delay(500);
        Shoulderservo.write(endH + 7);
        delay(250);
        Shoulderservo.write(endH);    //lower
        delay(1000);
        Gripservo.write(115);   //release
        delay(1000);

        Shoulderservo.write(90);      // arm leaves end location
        delay(500);

        endH = endH + 5;
      }
      count++;
    }

    if (count % 2 == 0) {

      startH = location[1][1] + 10;
      endH = location[1][1];

      for (int j = 1; j <= 3; j++) {

        if (j == 1) {
          fix = 5;
        }
        else if (j == 2) {
          fix = 8;
        }
        else if (j == 3) {
          fix = 10;
        }
        else {}

        Gripservo.write(location[2][5]);
        delay(500);
        Wristservo.write(location[2][3] + fix);
        delay(500);
        Elbowservo.write(location[2][2]);
        delay(500);
        Baseservo.write(location[2][0]);
        delay(1000);
        Shoulderservo.write(startH + 17);
        delay(500);
        Shoulderservo.write(startH + 7);
        delay(250);
        Shoulderservo.write(startH);


        //arrive at location of cube
        delay(1000);

        startH = startH - 5;

        Gripservo.write(80);   //catch cube
        delay(500);
        Shoulderservo.write(90);    //lift
        delay(500);
        Baseservo.write(90);   //change location
        delay(1000);
        Shoulderservo.write(endH + 17);
        delay(500);
        Shoulderservo.write(endH + 7);
        delay(250);
        Shoulderservo.write(endH);    //lower
        delay(500);
        Gripservo.write(115);   //release
        delay(1000);

        Shoulderservo.write(90);
        delay(500);

        endH = endH + 5;
      }
      count++;
    }
  }
  else if (val == 'C') {
  if (count % 2 == 1) {

    startH = location[0][1] + 10; // was at 63
    endH = location[0][1];    //was at 53

    for (int i = 1; i <= 3; i++) {

      if (i == 1) {
        fix = 5;
      }
      else if (i == 2) {
        fix = 8;
      }
      else if (i == 3) {
        fix = 10;
      }
      else {}

      Gripservo.write(location[0][5]);
      delay(500);
      Rotateservo.write(location[0][4]);
      delay(500);
      Wristservo.write(location[0][3]);
      delay(500);
      Elbowservo.write(location[0][2]);
      delay(500);
      Baseservo.write(location[0][0]);
      delay(1000);
      Shoulderservo.write(startH + 17);
      delay(500);
      Shoulderservo.write(startH + 7);
      delay(250);
      Shoulderservo.write(startH);      //arrive at location of cube
      delay(3000);

      startH = startH - 5;

      Gripservo.write(80);   //catch cube
      delay(2000);
      Shoulderservo.write(90);    //lift
      delay(1000);

      Baseservo.write(location[2][0]);   //change location
      delay(1000);
      Elbowservo.write(location[0][2]);
      Wristservo.write(location[0][3]);
      Rotateservo.write(location[0][4]);
      Shoulderservo.write(endH + 17);
      delay(500);
      Shoulderservo.write(endH + 7);
      delay(250);
      Shoulderservo.write(endH);    //lower
      delay(1000);
      Gripservo.write(115);   //release
      delay(1000);

      Shoulderservo.write(90);      // arm leaves end location
      delay(500);

      endH = endH + 5;
    }
    count++;
  }

  if (count % 2 == 0) {

    startH = location[1][1] + 10;
    endH = location[1][1];

    for (int j = 1; j <= 3; j++) {

      if (j == 1) {
        fix = 5;
      }
      else if (j == 2) {
        fix = 8;
      }
      else if (j == 3) {
        fix = 10;
      }
      else {}

      Gripservo.write(location[2][5]);
      delay(500);
      Wristservo.write(location[2][3] + fix);
      delay(500);
      Elbowservo.write(location[2][2]);
      delay(500);
      Baseservo.write(location[2][0]);
      delay(1000);
      Shoulderservo.write(startH + 17);
      delay(500);
      Shoulderservo.write(startH + 7);
      delay(250);
      Shoulderservo.write(startH);


      //arrive at location of cube
      delay(1000);

      startH = startH - 5;

      Gripservo.write(80);   //catch cube
      delay(500);
      Shoulderservo.write(90);    //lift
      delay(500);
      Baseservo.write(90);   //change location
      delay(1000);
      Shoulderservo.write(endH + 17);
      delay(500);
      Shoulderservo.write(endH + 7);
      delay(250);
      Shoulderservo.write(endH);    //lower
      delay(500);
      Gripservo.write(115);   //release
      delay(1000);

      Shoulderservo.write(90);
      delay(500);

      endH = endH + 5;
    }
    count++;
  }
  }
  else if (val == 'X') {
    Gripservo.write(115);
    Wristservo.write(0);
    Elbowservo.write(90);
    Baseservo.write(90);
    Shoulderservo.write(90);
  }
  else if (val == 'I") {
    float l1 = 14.5; // length of first part of arm
    float l2 = 18.5; // length of second part of arm
    
    
    // coordinates of the end effector
    float x = 13; // position of the brick
    float y = 13;
    float z = 0;
    
    float zz = z - 5.7; // accounts for the base
    
    
    // direction of the rotating base
    
    float u = sqrt (pow(x,2) + pow(y,2)); // distance in xy-plane of centre of arm to the brick
    
    float A = (atan(x / y)) / PI * 180 + 90; // angle by which the base must rotate converted from radians to degrees and add 90 to account for phase shift
    
    
    
    //direction of the elbow
    
    float q = sqrt(1-((pow(u,2)+pow(z,2)-pow(l1,2)-pow(l2,2))/(2*l1*l2)));
    
    float w = (sq(u) + sq(z) - sq(l1)) / (2 * l1 * l2);
    
    float C = atan2(q,w) / PI * 180; // angle that the elbow must bend converted from radians to degrees
    
    
     
    //direction of the shoulder
    
    float s = sqrt (sq(l1) + sq(l2) - 2*l1*l2*cos(C / 180 * PI));
    
    float r = (asin ((l1 * sin (C / 180 * PI)) / s)) / PI * 180;
    
    float B = r + (atan (zz / u)) / PI * 180;
    
    
    //Serial.println(u);
    Serial.println(A);
    Serial.println(B);
    Serial.println(C);
    
    
    // commands robot to move
    Baseservo.write(A);
    delay (2000);
    Shoulderservo.write(B);
    delay (2000);
    Elbowservo.write(C);
    Wristservo.write(180);
    Gripservo.write(90);
  }
delay(10); // Wait 10 milliseconds for next reading
}
